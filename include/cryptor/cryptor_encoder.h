//============================================================================================================
// C O P Y R I G H T
//------------------------------------------------------------------------------------------------------------
/// \copyright (C) 2022 Robert Bosch GmbH. All rights reserved.
//============================================================================================================
/// @file
#pragma once
#include "failable.h"
#include <vector>
#include <memory>
#include <map>


namespace vfm {

class CryptorRule;
class DataPack;
class MathStruct;
class Term;
class Equation;
class DataSrcArray;
class Parameters;

class CryptorEncoder : public Failable
{
public:
   std::string toString() const;

   std::string process_easy(const std::string& word);
   void readAlgRule(std::string & line);
   void applyRules(const std::shared_ptr<DataSrcArray>& in_encrypted_array, const std::shared_ptr<DataSrcArray>& out_decrypted_array);
   void setTerminationCondition(const std::string& cond);
   void addRule(const std::string& cond, std::string& eqs);
   void addRule(const std::string & rule);
   void readAlgorithm(const std::string& alg);
   void autoCreateFromOther(const std::shared_ptr<CryptorEncoder> complementary_encoder);

   bool loadFromFile(const std::string& in_path);
   bool storeToFile(const std::string& in_path);

   bool isAutoGenerated() const;
   void simplify();

   CryptorEncoder(const std::string& in_symb, const std::string& out_symb, const std::shared_ptr<DataPack> data, Parameters& pars);

private:
   bool auto_generated_ = false;
   std::shared_ptr<DataPack> data_;
   std::vector<std::shared_ptr<CryptorRule>> rules_;
   std::shared_ptr<Term> termination_condition_;
   std::string in_symb_;
   std::string out_symb_;
   Parameters* pars_;

   void createAssembly();

   void addRule(
      const std::shared_ptr<Term>& cond,
      const std::vector<std::shared_ptr<Equation>>& eqq);

   static std::pair<std::string, std::string> split_cond_and_eqs(const std::string& rule);
};

} // vfm